package test.java.integration.classic.compile.success

import org.junit.Test
import test.*
import test.java.integration.classic.compile.success.autofill.*
import java.time.LocalDateTime
import kotlin.test.assertContentEquals

/**
 *
 * @author afezeria
 */
class AutoFillTest : BaseTest() {
    @Test
    fun `handling auto-filled values with type processors`() {
        initData<AutoFillEntity>()
        val list = mutableListOf(FillValueHandledByTypeHandler(), FillValueHandledByTypeHandler())
        val impl = getJavaDaoInstance<AutoFillWithTypeHandlerDao>()
        val count = impl.batchInsert(list)
        assert(count == 2)
        assertContentEquals(list.map { it.id }, listOf("1", "2"))
    }

    @Test
    fun `fill Object type field with db generated value`() {
        initData<AutoFillEntity>()
        val list =
            mutableListOf(FillObjectTypeFieldByDbGeneratedKeyEntity(), FillObjectTypeFieldByDbGeneratedKeyEntity())
        val impl = getJavaDaoInstance<AutoFillWithObjectTypeIdDao>()
        val count = impl.batchInsert(list)
        assert(count == 2)
        assertContentEquals(list.map { it.id }, listOf(1L, 2L))
    }

    @Test
    fun `fill by database generated value`() {
        initData(AutoFillEntity::class)
        val impl = getJavaDaoInstance<FillGeneratedKeysDao>()
        val entity = DbGeneratedKeyEntity()
        val count = impl.insert(entity)
        assert(count == 1)
        assert(entity.id == 1L)
    }

    @Test
    fun `fill multiple properties by database generated key`() {
        initData(AutoFillEntity::class)
        val impl = getJavaDaoInstance<FillMultiGeneratedKeysDao>()
        val entity = MultiDbGeneratedKeysEntity()
        val count = impl.insert(entity)
        assert(count == 1)
        assert(entity.id == 1L)
        assert(entity.whenCreated != null)
    }

    @Test
    fun `custom generator`() {
        initData(AutoFillEntity::class)
        NegativeLongIdGenerator.reset()
        val impl = getJavaDaoInstance<CustomGeneratorDao>()
        val entity = CustomGeneratorEntity()
        val count = impl.insert(entity)
        assert(count == 1)
        assert(entity.id == -1L)
        val entity2 = CustomGeneratorEntity()

        val count2 = impl.insert(entity2)
        assert(count2 == 1)
        assert(entity2.id == -2L)
    }

    @Test
    fun `fill field with value generated by the custom generator on batch insert`() {
        initData(AutoFillEntity::class)
        NegativeLongIdGenerator.reset()
        val impl = getJavaDaoInstance<CustomGeneratorBatchInsertDao>()
        val list = listOf(CustomGeneratorEntity(), CustomGeneratorEntity())
        val count = impl.batchInsert(list)
        assert(count == 2)
        assertContentEquals(list.map { it.id }, listOf(-1L, -2L))
    }

    @Test
    fun `fill multiple properties with the generated values of the custom generator`() {
        initData(AutoFillEntity::class)
        NegativeLongIdGenerator.reset()
        val now = LocalDateTime.now()
        LocalDateTimeGenerator.dateTime = now
        val impl = getJavaDaoInstance<MultipleFieldCustomGeneratorDao>()
        val entity = MultipleFieldCustomGeneratorEntity()
        val count = impl.insert(entity)
        assert(count == 1)
        assert(entity.id == -1L)
        assert(entity.whenUpdated == now)
        val entity2 = MultipleFieldCustomGeneratorEntity()

        val count2 = impl.insert(entity2)
        assert(count2 == 1)
        assert(entity2.id == -2L)
        assert(entity2.whenUpdated == now)
    }

    @Test
    fun `fill on update`() {
        val old = LocalDateTime.of(2000, 1, 1, 0, 0)
        val new = LocalDateTime.of(2001, 1, 1, 0, 0)
        LocalDateTimeGenerator.dateTime = new
        initData(AutoFillEntity(name = "a", whenUpdated = old))
        val impl = getJavaDaoInstance<FillOnUpdateDao>()
        val entity = FillByCustomGeneratorWhenUpdateEntity(1, "b")
        val count = impl.updateNonNullFields(entity)
        val list = env.find("auto_fill_int_id")
        assert(count == 1)
        assert(entity.whenUpdated == new)
        assert(entity.whenUpdated == list[0]["when_updated"])
    }


}